# Першыя крокі #

Гэтая глава пра тое, як пачаць працу з Git. Спачатку мы растлумачым асновы інструмэнтаў кіраваньня вэрсіямі, затым разьбяромся як атрымаць працоўны Git на сваёй сістэме і, урэшце, як наладзіць яго так, каб зь ім можна было пачаць працаваць. Напрыканцы гэтае главы вы будзеце разумець для чаго наогул прызначаны Git, чаму ім варта карыстацца і будзеце умець наладжваць яго.

## Пра кіраваньне вэрсіямі ##

Што такое кіраваньне вэрсіямі і навошта яно патрэбнае? Кіраваньне вэрсіямі — гэта сістэма, якая запісвае зьмены, што адбыліся з файлам ці наборам файлаў зь цягам часу, так каб потым вы маглі бачыць патрэбныя старыя вэрсіі. У прыкладах гэтай кнігі мы будзем працаваць з зыходнымі кодамі праграм, але, насамрэч, вы можаце працаваць практычна з любымі тыпамі файлаў, якія існуюць на вашым кампутары.

Калі вы графічны ці вэб-дызайнер і маеце намер захоўваць кожную вэрсію малюнкаў ці слаёў (што вам больш патрэбна), то выкарыстаньне сістэмы кіраваньня вэрсіямі (СКВ; Version Control System, VCS) гэта вельмі разумны выбар. Гэта дазволіць вам вярнуць файлы да папярэдняга стану, вярнуць да папярэдняга стану увесь праект, параўнаць змены паміж рознымі станамі, убачыць хто апошнім змяняў нешта, што можа выклікаць праблемы, хто прапанаваў змену і калі, і шмат іншага. Выкарыстаньне СКВ у асноўным значыць, што калі вы сапсавалі нешта ці страцілі файлы, то гэта можна лёгка аднавіць. Як дадатак, гэта не запатрабуе вялікіх намаганьняў і выдаткаў з вашага боку.  

### Лякальныя сістэмы кіраваньня вэрсіямі ###

Шмат людзей ў якасьці мэтаду кіраваньня вэрсіямі выбірае капіяваньне файлаў у іншую тэчку (магчыма, з датай у назве, калі чалавек досыць разумны). Гэты падыход вельмі распаўсюджаны з-за сваёй прастаты, але ён пакідае неверагодна шмат магчымасьцяў для памылак. Вельмі лёгка забыцца ў якой тэчцы вы зараз і выпадкова запісаць ня ў той файл, ці зкапіяваць зусім не туды, куды вы зьбіраліся.

Каб вырашыць гэтую праблему праграмісты шмат часу таму распрацавалі лякальныя СКВ, якія выкарыстоўваюць простую базу даньняў каб захоўваць ўсе змены ў файлах, вэрсіі якіх адсочваюцца (гл. Малюнак 1-1).

Insert 18333fig0101.png 
Малюнак 1-1. Сьхема лякальнага кіраваньня вэрсіямі.

Адной з папулярных у той час СКВ была rcs, якая ўсё яшчэ пастаўляецца з вялікай колькасьцю кампутараў. Нават папулярная апэрацыйная сыстэма Mac OS X усталёўвае rcs у складзе пакунка Developer Tools. Праца гэтай дастасаваньня заснаваная на захаваньні на дыску ў спэцыяльным фармаце набораў латак (patch) (гэта запісы розьніцы паміж дзьвюма файламі) для кожнай зьмены файла. Гэта дапамагае вярнуць файл да любога з зафіксаваных станаў, пасьлядоўна накладыючы латкі адну за адной.

### Цэнтралізаваныя сыстэмы кіраваньня вэрсіямі ###

Наступнай вялікай праблемай, была неабходнасьць супрацоўнічаць з распрацоўнікамі за іншымі кампутарамі. Централізаваныя сыстэмы кіраваньня вэрсіямі (ЦСКВ) былі распрацаваныя каб вырашыць гэтую праблему. Такія сыстэмы як CVS, Subversion і Perforce складаюцца з сэрвера, на якім захоўваюцца ўсе даньні па вэрсіях файлаў, і некаторай колькасьці кліенцкіх машын, якія атрымліваюць файлы з сэрвера. Шмат год такая схема зьяўлялася стандартам кіраваньня вэрсіямі (гл. Малюнак 1-2).

Insert 18333fig0102.png 
Малюнак 1-2. Схема цэнтралізаванага кіраваньня вэрсіямі.

Гэты падыход мае шмат пераваг, асабліва ў параўнаньні з лякальнымі СКВ. Напрыклад, усе дакладна ведаюць што астатнія робяць і што навогул адбываецца ў праекце. Адміністратары маюць зручную магчымасьць кантролю за тым хто што можа зрабіць. І гэта значна прасьцей, чым адміністраваньне лякальных баз даньняў СКВ на кожнай кліенцкай машыне.

Аднак, гэты падыход мае і некаторыя сур'ёзныя мінусы. Самы відавочны зь іх — цэнтральны сэрвер яўляе сабою пункт, крах якога цягне за сабою крах усёй сыстэмы. Калі гэты сэрвер спыніць працу на гадзіну — у гэтую гадзіну ніхто ня зможа абмяняцца з супрацоўнікамі вынікамі сваёй працы ці захаваць новую вэрсію таго, над чым ён ці яна зараз працуе. Калі жорсткі дыск, на якім зьмешчаная цэнтральная база даньняў пашкодзіцца, а актуальных рэзервовых копіяў няма, то вы згубіце абсалютна ўсё: усю гісторыю праекту, за выключэньнем тых здымкаў, што карыстальнікі выпадкова мелі на сваіх лякальных кампутарах. Лякальныя СКВ пакутуюць на тую ж праблему: калі ты маеш усю гісторыю праекта толькі ў адным месцы, то ты рызыкуеш згубіць усё.

### Разьмеркаваныя сыстэмы кіраваньня вэрсіямі ###

І вось тут у гульню ўступаюць разьмеркаваныя сыстэмы кіраваньня вэрсіямі (РСКВ). У РСКВ (такіх як Git, Mercurial, Bazaar ці Darcs) кліенты ня толькі атрымліваюць апошнюю вэрсію файлаў: яны атрымліваюць поўную копію сховішча. Такім чынам, калі любы з сэрвераў праз які ідзе абмен вынікамі працы "памрэ", то любое з кліенцкіх сховішчаў можа быць зкапіявана на сэрвер каб аднавіць усю інфармацыю. Кожнае сховішча на кожным з працоўных месцаў насамрэч поўная рэзервовая копія ўсіх даньняў (гл. Малюнак 1-3).

Insert 18333fig0103.png 
Малюнак 1-3. Схема разьмеркаванай сыстэмы кіраваньня вэрсіямі.

Апроч таго, шмат якія з гэтых сыстэм выдатна працуюць з некалькімі аддаленымі сховішчамі, так што вы можаце адначасова па-рознаму узаемадзейнічаць зь некалькімі рознымі групамі людзей у межах аднаго праекта. Гэта дазваляе наладжваць розные тыпы пасьлядоўнасьцяў дзеяньняў, што немагчыма з цэнтралізаванымі сыстэмамі.

## Кароткая гісторыя Git ##

Як і шмат іншых вялікіх рэчаў у жыцьці, Git пачынаўся са стваральнага разбурэньня і палымяных спрэчак. Ядро Linux — праграмны праект з адкрытымі зыходнікамі даволі вялікага аб'ёму. На працягу большай часткі пэрыяду існаваньня ядра Linux(1991–2002) зьмены ў ім распаўсюджваліся у выглядзе патчаў і архіваваных файлаў. У 2002 годзе праект распрацоўкі ядра Linux пачаў карыстацца BitKeeper — прапрыетарнай РСКВ.

У 2005 годзе адносіны паміж суполкай распрацоўнікаў ядра Linux і камэрцыйнай кампаніяй, што распрацоўвала BitKeeper сапсаваліся і бясплатна карыстацца гэтай утылітай стала немагчыма. Гэта запатрабавала ад суполкі распрацоўнікаў Linux (і, ў прыватнасьці, Лінуса Торвальдса (Linus Torvalds)), стваральніка Linux'а) стварыць іх уласную сістэму, заснаваную на досьледу, які яны атрымалі пад час карыстаньня BitKeeper. Некаторыя з патрабаваньняў да сыстэмы:

*	Хуткасьць
*	Просты дызайн
*	Моцная падтрымка нелінейнай распрацоўкі (сотні паралельных галін)
*	Цалкам разьмеркаваная
*	Магчымасць эфэктыўна працаваць зь вялікімі праектамі, кшталту ядра Linux (хуткасьць і памер даньняў)

З часу свайго зьяўленьня ў 2005 годзе Git разьвіваўся і сталеў каб быць лёгкім у выкарыстаньні і пры гэтым захоўваў гэтыя першапачатковыя якасьці. Ён неверагодна хуткі, вельмі эфэктыўны ў працы зь вялікімі праектамі і мае неверагодную сыстэму кіраваньня галінамі для нелінейных праектаў (гл. главу 3).

## Асновы Git ##

Такім чынам, што ж такое Git, калі ў двух словах? Гэта вельмі важны для засваеньня разьдзел, таму што калі вы зразумееце што такое Git і фундаментальныя асновы таго як ён працуе, то  эфэктыўнае выкарыстаньне Git можа стаць значна больш простым для вас. Пад час вывучэньня Git пастарайцеся не абапірацца на ўспаміны пра іншыя СКВ, кшталту Subversion і Perforce, гэта дапаможа пазьбегнуць памылак і разгубленасьці пад час выкарыстаньня гэтай прылады. Git захоўвае інфармацыю і успрымае яе вельмі непадобна на іншыя сыстэмы, нават ня гледзячы на даволі блізкае падабенства карыстальніцкага інтэрфэйсу. Разуменьне гэтых адрозненьняў дапаможа прадухіліць памылкі і разгубленасьць пад час работы з Git.

### Здымкі, а не адрозненьні ###

Асноўнае адрозненьне Git ад любой іншай СКВ (уключаючы Subversion і кампанію) — тое як Git ўяўляе сабе даньні, якіе захоўвае. Канцэптуальна, большасьць іншых сыстэм захоўвае інфармацыю ў выглядзе набору змяненьнеў. Гэтыя сыстэмы (CVS, Subversion, Perforce, Bazaar і гэтак далей) ставяцца да інфармацыі, якую яны захоўваюць, як да набора адрозненьняў для кожнага з файлаў у параўнаньні з папярэднім станам, як гэта паказана на Малюнку 1-4.

Insert 18333fig0104.png 
Малюнак 1-4. Іншыя сыстэмы звычайна захоўваюць даньні ў выглядзе набора зьменаў для базавай вэрсіі кожнага файла.

Git ўспрымае даньні ў сховішчы інакш. Замест таго, каб успрымаць іх як наборы зьменаў, Git ставіцца да даньняў хутчэй як да набора здымкаў стану невялікай файлавай сыстэмы. Кожны раз, калі вы захоўваеце даньні вашага праекту ў Git, ён па-сутнасці, робіць здымак таго, як вашыя файлы выглядаюць ў гэты момант і спасылку на гэты здымак. Для павышэньня эфэктыўнасьці, калі файл не зьмяняўся, то Git не захоўвае яго яшчэ раз, а проста робіць спасылку на яго папярэдні стан, які ўжо быў захаваны. Git успрымае даньні больш падобна на тое, што паказана на Малюнку 1-5.

Insert 18333fig0105.png 
Малюнак 1-5. Git захоўвае даньні як здымкі стану праекта пэўнага часу.

Гэта вельмі сур'ёзна адрознівае Git ад практычна ўсіх іншых СКВ. Гэта вымушае Git пераглядзець амаль усе асьпекты кіраваньня вэрсіямі, што большасьць іншых сыстэм узялі з сыстэм папярэдняга пакаленьня. Гэта робіць Git больш падобным на невялікую файлавую сыстэму зь неверагодна магутнымі інструмантамі, створанымі каб працаваць паверх яе, чымсьці на звычайную СКВ. Некаторыя зь пераваг, які дае такі падыход да захоўваньня даньняў, мы разгледзім ў Раздзеле 3, пад час вывучэньня працы з галінамі.

### Практычна ўсе аперацыі выконваюцца лякальна ###

Большасьць аперацый у Git патрабуюць для працы толькі лякальныя файлы і рэсурсы, бо звычайна інфармацыя зь іншых кампутараў у сетцы не патрэбная. Калі вы карысталіся ЦСКВ, дзе большасьць аперацый маюць дадатковыя затрымкі, звязаныя з працай праз сеціва, то гэты асьпект Git прымусіць думаць, што богі надзялілі гэтую сыстэму неверагоднымі здольнасьцямі. Большасьць аперацый выглядае практычна імгненнымі, паколькі ўся гісторыя праекта захоўваецца непасрэдна на вашым лякальным дыску.

Напрыклад, каб паглядзець гісторыю праекта Git не трэба зьвяртацца да серверу, каб атрымаць гісторыю і адлюстраваць яе для вас — можна проста прачытаць яе непасрэдна з вашай лякальнай базы даньняў. Гэта значыць, што вы ўбачыце гісторыю праекта практычна імгненна. Калі вы захацелі ўбачыць розніцу паміж бягучай вэрсіяй файла і той, што была месяц таму, Git можа праглядзець файл месячнай даўніны і вылічыць розьніцу паміж вэрсіямі лякальна, замест таго каб прасіць у сервера зрабіць гэта, альбо выцягваць старую вэрсію з сервера і потым зноўку ж вылічваць розьніцу лякальна.

Да таго ж, гэта значыць што вельмі няшмат чаго нельга зрабіць калі вы па-за сеткай ці VPN. Калі вы ў самалёце ці ў цягніку і хочаце крыху папрацаваць, то вы можаце захоўваць праект ў СКВ (ці рабіць каміты, як яшчэ кажуць) без аніякіх праблем і перашкод ажно пакуль не зьявіцца сетка, з дапамогай якой вы зможаце выгрузіць зьмены. Калі вы прыйшлі дадому і не здолелі наладзіць VPN, вы ўсё роўна можаце працягваць працаваць. У многіх іншых сыстэмах вельмі цяжка, калі наогул магчыма рабіць так. У Perforce, напрыклад, вы няшмат што можаце зрабіць, калі няма сувязі з серверам, а ў Subversion і CVS вы можаце рэдагаваць файлы, але ня будзеце ў стане захаваць зьмены ў сваю базу даньняў (паколькі сувязі з базай даньняў няма). Можа гэта і не выглядае вялікім дасягненьнем, але вы будзеце зьдзіўленыя, калі ўбачаце наколькі гэта можа зьмяніць справу.

### Git правярае цэласнасьць ###

Усе даньні ў Git праходзяць працэдуру стварэньня кантрольнай сумы і затым да іх можна зьвярнуцца па гэтай кантрольнай суме. Такім чынам, немагчыма зьмяніць зьмест якога-небудзь файла ці тэчкі без таго, каб Git не заўважыў гэтыя зьмены. Гэты функцыянал убудаваны ў Git на самым нізкім ўзроўні і зьяўляецца неад'емнай часткай філязофіі сыстэмы. Вы не можаце страціць інфармацыю ці пашкодзіць файл так, каб Git не быў ў стане выявіць гэта.

Механізм, які выкарыстоўвае Git для стварэньня кантрольнай сумы называецца хэш-сумай па алгарытме SHA-1. Хэш-сума ўяўляе сабою шаснаццацірычную лічбу (якая складаецца з лічбаў 0–9 і літар a–f) даўжынёю 40 знакаў і вылічваецца ў Git на  падставе зьместа файла ці структуры тэчак. Выглядае хэш-сума SHA-1 прыблізна такім чынам:

	24b9da6552252987aa493b52f8696cd6d3b00373

Гэтыя хэшы можна ўбачыць паўсюль ў Git, бо яны выкарыўстоўваюцца там вельмі часта. Фактычна, Git захоўвае ўсё ў сваёй базе даньняў не па імёнах файлаў, а звяртаючыся па хэш-сумах зьмесціва даньняў.

### Git ў асноўным толькі дадае даньні ###

Пры выкананьні нейкіх дзеянняў у Git практычна заўсёды дадаюцца даньні ў базу даньняў. Даволі цяжка прымусіць сыстэму выдаліць даньні так ці інакш, ці зрабіць нешта, што нельга адмяніць. Як і ў любой СКВ, вы можаце згубіць ці заблытацца ў зьменах, якія вы яшчэ не занеслі ў сыстэму, але пасьля таго, як вы захавалі здымак стаў у Git, яго вельмі цяжка згубіць, асабліва калі вы рэгулярна выгружаеце сваю базу ў іншы рэпазітар.

Гэта робіць выкарыстаньне Git прыемным, нават, радасным, бо ведаеш, што ёсьць магчымасьць эксьперыментаваць без небясьпеки сапсаваць ўсё пад час эксьперыменту. Для больш глыбокага разуменьня як Git захоўвае свае даньні і як можна узнавіць даньні, якія зьдаюцца згубленымі назаўсёды чытайце Главу 9.

### Тры станы ###

Увага! Гэта галоўнае, што вам трэба запомніць пра Git, калі вы хочаце каб далей навучаньне пайшло гладка. Git мае тры галоўных станы, у якіх могуць знаходзіцца вашыя файлы: захаваныя (закамічаныя ад англ. commited), змененыя і падрыхтаваныя (англ. staged). Захаваныя — тыя файлы, якія ўжо бяспечна захоўваюцца ў лякальнай базе даньняў. Зьмененыя файлы былі зьменены, але яшчэ не былі захаваныя ў базу. Падрыхтаваныя — гэта зьмененыя файлы, якія былі пазначаныя для таго, каб захаваць пад час наступнага каміту (сеанса захаваньня файлаў).

Гэта падводзіць нас да трох галоўных сэкцый праекта ў Git: тэчкі Git ці рэпазітару (git directory на малюнку), працоўнай тэчкі (git directory на малюнку) і зоны падрыхтаваных файлаў (staging area).

Insert 18333fig0106.png 
Малюнак 1-6. Працоўная тэчка, зона файлаў, падрыхтаваных да захоўваньня і тэчка Git.

Тэчка Git гэта месца, дзе сыстэма захоўвае метаданьні і базу даньняў з аб'ектамі вашага праекту. Гэта найбольш важная частка Git і менавіта яе копія робіцца, калі вы клануеце рэпазітар з іншага кампутара.

Працоўная тэчка гэта фактычна стан пэўнай вэрсіі праекту. Гэтыя файлы узятыя са сьціснутай базы даньняў у тэчцы Git і зьмешчаныя на дыску каб вы маглі імі карыстацца і мадыфікаваць.

Зона падрыхтаваных файлаў гэта звычыйны файл, звычайна зьмешчаны ў тэчцы Git, які захоўвае інфармацыю пра ўсё, што было абрана і пойдзе у наступны каміт. Часам яго яшчэ называюць індэксам (index), але робіцца стандартам называць гэты файл зонай падрыхтаваных файлаў (staging area).

Звычайна працэс працы з Git выглядае наступным чынам:

1.	Вы зьмяняеце файлы ў сваёй працоўнай тэчцы.
2.	Падрыхтоўваеце файлы да захоўваньня ў базе, дадаючы іх адбітак ў зону падрыхтаваных файлаў.
3.	Захоўваеце файлы, у тым выглядзе, як яны былі змешчаныў у зону падрыхтаваных файлаў, зьмяшчаючы іх ў тэчку Git.

Калі гэтая вэрсія файла была захаваная ў тэчцы git, то яна лічыцца захаванай (ці закамічанай). Калі файл зьменены, але дабаўлены ў зону падрыхтаваных файлаў, то ён лічыцца падрыхтаваным (staged). І калі файл быў зьменены, але ня быў падрыхтаваным, то ён лічыцца зьмененым. У Главе 2 вы даведаецеся больш пра гэтыя станы, і пра тое, як, альбо скарыстацца гэтым, альбо наогул прапусціць этап падрыхтаваных файлаў.

## Усталёўка Git ##

Цяпер мы пачнем непасрэдна выкарыстоўваць Git. Пачнем ад пачатку — з усталёўкі. Ёсьць некалькі метадаў выканаць усталёўку. Два асноўных, гэта ўсталёўка з зыходнікаў і усталёўка з гатовага пакету для вашае платформы.

### Усталёўка з зыходнікаў ###

Калі гэта магчыма, усталёўка з зыходнікаў можа быць даволі карыснай, таму што вы атрымліваеце самую сьвежую вэрсію. З кожнай новай вэрсіяй распрацоўнікі Git імкнуцца дадаць як мага больш зручных паляпшэньняў інтэрфэйсу, так што — калі вы нармальна ставіцеся да кампіляцыі праграм з зыходнікаў — лепш за ўсё атрымаць апошнюю вэрсію. Часта дыстрыбутывы Linux зьмяшчаюць даволі старыя вэрсіі пакетаў. Так што, калі вы не карыстаецеся вельмі новым дыстрыбутывам, ці, наадварот вельмі старым, то зборка з зыходнікаў можа быць найлепшым выйсьцем для вас.

Каб праінсталяваць Git, вы павінны мець наступныя бібліятэкі, ад якіх Git залежыць: curl, zlib, openssl, expat і libiconv. Напрыклад, калі вы карыстаецеся сыстэмай, якая выкарыстоўвае yum (як, напрыклад, Fedora) ці apt-get (як сыстэмы, пабудаваныя на Debian), то можна скарыстацца адной з наступных каманд, каб усталяваць ўсе патрэбныя пакеты:

	$ yum install curl-devel expat-devel gettext-devel \
	  openssl-devel zlib-devel

	$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \
	  libz-dev libssl-dev

Калі ўсе бібліятэкі ўсталяваныя, трэба запампаваць апошнюю вэрсію з вэб-сайту Git:

	http://git-scm.com/download

Затым зкампіляваць і ўсталяваць:

	$ tar -zxf git-1.6.0.5.tar.gz
	$ cd git-1.6.0.5
	$ make prefix=/usr/local all
	$ sudo make prefix=/usr/local install

Калі ўсё скончана, вы можаце атрымаць Git праз сам Git для абнаўленьня:

	$ git clone git://git.kernel.org/pub/scm/git/git.git

### Усталёўка на Linux ###

Калі вы хочаце праінсталяваць Git з бінарнага ўсталявальніка, можна скарыстацца звычайнай прыладай для кіраваньня пакетамі, якая ідзе ў складзе вашага дыстрыбутыва. Калі вы ў Fedora, то можна скарыстацца yum:

	$ yum install git-core

Ці калі вы ў заснаваным на Debian дыстрыбутыве, кшталту Ubuntu, скарыстайцеся apt-get:

	$ apt-get install git-core

### Усталёка на Mac ###

Існуе два лёгкіх спосабы ўсталяваць Git на Mac. Найпрасьцейшы — скарыстацца графічным ўсталявальнікам, які можна загрузіць са старонкі Google Code (гл. Малюнак 1-7):

	http://code.google.com/p/git-osx-installer

Insert 18333fig0107.png 
Малюнак 1-7. Усталявальнік Git для OS X.

Іншы распаўсюджаны спосаб — усталяваць Git праз MacPorts (`http://www.macports.org`). Калі вы маеце праінсталяваны MacPorts, істалюйце Git такім чынам:

	$ sudo port install git-core +svn +doc +bash_completion +gitweb

Не абавязкова ўсталёўваць усе дадаткі, але вы можаце ўключыць +svn на выпадак, калі вам спатрэбіцца выкарыстоўваць Git з рэпазіторамі Subversion (гл. Главу 8).

### Усталёўка на Windows ###

Усталяваць Git на Windows вельмі проста. Праект msysGit мае вельмі простую працэдуру усталёўкі. Дастаткова загрузіць усталявальнік ў выглядзе файла  exe са старонкі Google Code і запусціць яго:

	http://code.google.com/p/msysgit

Пасля ўсталёўкі вы будзеце мець як вэрсію для каманднага радка (уключна з кліентам SSH, які будзе вельмі карысны пазней), так і стандарную вэрсію з графічным інтэрфейсам.

## Пачатковая наладка Git ##

Цяпер, калі вы маеце ўсталяваны Git, трэба зрабіць некалькі рэчаў, каб наладзіць вашае асяродзьдзе Git. Гэтыя рэчы трэба рабіць толькі аднойчы, пасьля абнаўленьня гэтыя наладкі захаваюцца. Канешне, вы можаце зьмяніць іх ў любы час, калі выканаеце гэтыя каманды яшчэ раз.

Git мае прыладу пад назвай git config, якая дазваляе наладзіць параметры, якія кіруюць ўсімі аспектамі таго, як Git выглядае і працуе. Гэтыя параметры могуць захоўвацца ў трох розных месцах:

*	Файл `/etc/gitconfig`: Утрымлівае параметры для ўсіх карыстальнікаў у сыстэме і іх рэпазітараў. Калі ўказаны параметр ` --system` для `git config`, то для чытаньня і запісу зменных будзе выкарыстоўвацца менавіта гэты файл. 

*	Файл `~/.gitconfig`: Спецыфічны для вашага карыстальніка. Каб Git для чытаньня і запісу выкарыстоўваў менавіта гэты файл выкарыстоўваецца опцыя `--global`. 
 
*	Файлы наладак ў тэчцы git (`.git/config`) любога рэпазітара, якім вы зараз карыстаецеся: Спецыфічныя для гэтага канкрэтнага рэпазітара. Кожны ўзровень перавызначае зьменныя папярэдняга ўзроўню, так што зьменныя з `.git/config` перавызначаюць зменныя з  `/etc/gitconfig`.

У сыстэмах з Windows Git шукае файл `.gitconfig` ў хатняй(`$HOME`) тэчцы карыстальніка (`C:\Documents and Settings\$USER` для большасьці карыстальнікаў). Апроч таго Git, будзе шукаць яшчэ і файл наладак файл /etc/gitconfig, але ўжо па адносным шляху MSys, то бок тэчку, куды быў усталяваны Git на вашым кампутары.

### Дазеныя карыстальніка ###

Першыя наладкі, якія трэба выканаць пасля ўсталёўкі Git, гэта заданьне вашага імя карыстальніка і адраса электроннай пошты. Гэта важна, таму што кожны раз, калі вы захоўваеце нешта ў базе даньняў Git будзе выкарыстоўваць гэтую інфармацыю,  то бок, яна будзе нязьменна прысутнічаць ў кожным каміце, які вы будзеце ажыцьцяўляць:

	$ git config --global user.name "John Doe"
	$ git config --global user.email johndoe@example.com

Зноўку ж, гэтая наладка робіцца толькі раз, калі скарыстацца опцыяй `--global`, таму што ў такім выпадку Git заўсёды будзе карыстацца гэтай інфармацыяй для ўсяго, што вы робіце ў гэтай сыстэме. Калі яе трэба замяніць на іншае імя ці электронны адрас для нейкага аднаго праекту, то можна запусціць тую ж каманду, знаходзячыся ў тэчцы гэтага праекта, але ўжо без опцыі `--global`.

### Ваш рэдактар ###

Калі дадзеныя вашага карыстальніка зададзеныя, вы можаце наладзіць тэкставы рэдактар па-вызначэньню, які будзе выкарыстоўвацца ў Git, калі трэба набраць паведамленьне. Па-змоўчваньню, Git выкарыстоўвае прадвызначаны ў сістэме рэдактар, якім звычайна зьяўляецца Vi ці Vim. Калі вы хочаце карыстацца іншым тэкставым рэдактарам, напрыклад Emacs, трэба зрабіць наступнае:

	$ git config --global core.editor emacs

### Выбар diff-утыліты ###

Яшчэ адна карысная опцыя, якую вы, магчыма, захочаце наладзіць, гэта заданьне diff-утыліты для вырашэньня канфліктаў пры зліцьці (merge). Напрыклад, калі вы жадаеце выкарыстоўваць vimdiff:

	$ git config --global merge.tool vimdiff

Git умее працаваць з accepts kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge і opendiff. Апроч гэтага, вы можаце наладзіць сваю уласную прыладу. Больш падрабязна напісана пра гэта ў Главе 7.

### Праверка наладак ###

Каб праверыць наладкі, можна скарыстацца камандай `git config --list`, каб вывесьці сьпіс наладак, якія Git можа тут адшукаць:

	$ git config --list
	user.name=Scott Chacon
	user.email=schacon@gmail.com
	color.status=auto
	color.branch=auto
	color.interactive=auto
	color.diff=auto
	...

Вы можаце убачыць нейкія параметры больш чым аднойчы, таму што Git можа атрымаць яго з розных файлаў (`/etc/gitconfig` і `~/.gitconfig`, напрыклад). У гэтым выпадку Git выкарыстоўвае апошняе значэньне для гэтага асобнага параметра.

Апроч таго, вы можаце праверыць значэньне толькі аднаго параметра з дапамогай каманды выгляду `git config {параметр}`:

	$ git config user.name
	Scott Chacon

## Атрыманьне дапамогі ##

Каб атрымаць дапамогу, калі яна вам спатрэбілася пад час выкарыстаньня Git, вы можаце выклікаць старонку даведкі, адной з трох наступных каманд:

	$ git help <каманда>
	$ git <каманда> --help
	$ man git-<каманда>

Напрыклад, каб атрымаць даведку па камандзе config дастаткова выканаць:

	$ git help config

Гэта вельмі зручна, таму што даведкай можна скарыстацца дзе і калі заўгадна, нават па-за сецівам. Калі даведкі і гэтай кнігі недастаткова і вам патрэбная дапамога сьпецыяліста, то вы можаце пашукаць яне на каналах `#git` ці `#github` на IRC серверы Freenode  (irc.freenode.net). Гэтыя каналы пастаянна запоўненыя сотнямі асоб, якія вельмі шмат ведаюць пра Git і даволі часта гатовыя дапамагчы.

## Вынікі ##

Цяпер вы павінны мець некаторае ўяўленьне пра Git і яго адрозненьні ад ЦСКВ, якія могуць быць вам карыснымі. Апроч таго, зараз вы павінны мець працоўную вэрсію Git у сваёй сыстэме, з вашымі асабістымі наладкамі. Цяпер прыйшоў час перайсці да асноў працы з Git.
